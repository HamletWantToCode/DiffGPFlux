function rbf(Œ≥::Array, X‚ÇÅ::Matrix, X‚ÇÇ::Matrix)::Matrix
      F, N‚ÇÅ, N‚ÇÇ = size(X‚ÇÅ, 1), size(X‚ÇÅ, 2), size(X‚ÇÇ, 2)
      K = Array{eltype(Œ≥)}(undef, N‚ÇÅ, N‚ÇÇ)
      for j in 1:N‚ÇÇ
            for i in 1:N‚ÇÅ
                  sqd = zero(eltype(Œ≥))
                  for k in 1:F
                        sqd += Œ≥[k]*(X‚ÇÅ[k,i] - X‚ÇÇ[k,j])^2
                  end
                  K[i,j] = exp(-0.5*sqd)
            end
      end
      return K
end

function ‚àá‚Çìrbf(Œ≥::Array, X‚ÇÅ::Matrix, X‚ÇÇ::Matrix)::Array  # derivative on X1
    F, N‚ÇÅ, N‚ÇÇ = size(X‚ÇÅ, 1), size(X‚ÇÅ, 2), size(X‚ÇÇ, 2)
    ‚àá‚ÇìK = Array{eltype(Œ≥)}(undef, F, N‚ÇÅ, N‚ÇÇ)
    for j in 1:N‚ÇÇ
          for i in 1:N‚ÇÅ
                sqd = zero(eltype(Œ≥))
                for m in 1:F
                      sqd += Œ≥[m]*(X‚ÇÅ[m,i]-X‚ÇÇ[m,j])^2
                end
                for l in 1:F
                      ‚àá‚ÇìK[l,i,j] = -Œ≥[l]*(X‚ÇÅ[l,i]-X‚ÇÇ[l,j])*exp(-0.5*sqd)
                end
          end
    end
    return ‚àá‚ÇìK
end

function linear(Œ≥::Array, X‚ÇÅ::Matrix, X‚ÇÇ::Matrix)::Array
      F, N‚ÇÅ, N‚ÇÇ = size(X‚ÇÅ, 1), size(X‚ÇÅ, 2), size(X‚ÇÇ, 2)
      K = Array{eltype(Œ≥)}(undef, N‚ÇÅ, N‚ÇÇ)
      for j in 1:N‚ÇÇ
            for i in 1:N‚ÇÅ
                  dot_prod = zero(eltype(Œ≥))
                  for m in 1:F
                        dot_prod += Œ≥[m]*X‚ÇÅ[m,i]*X‚ÇÇ[m,j]
                  end
                  K[i,j] = dot_prod + Œ≥[F+1]
            end
      end
      return K
end

function ‚àá‚Çìlinear(Œ≥::Array, X‚ÇÅ::Matrix, X‚ÇÇ::Matrix)::Array
      F, N‚ÇÅ, N‚ÇÇ = size(X‚ÇÅ, 1), size(X‚ÇÅ, 2), size(X‚ÇÇ, 2)
      ‚àá‚ÇìK = Array{eltype(Œ≥)}(undef, F, N‚ÇÅ, N‚ÇÇ)
      for j in 1:N‚ÇÇ
            for i in 1:N‚ÇÅ
                  for l in 1:F
                        ‚àá‚ÇìK[l,i,j] = Œ≥[l]*X‚ÇÇ[l,j]
                  end
            end
      end
      return ‚àá‚ÇìK
end

function mixed_effect_kernel(Œ∏::Array, X‚ÇÅ::Matrix, X‚ÇÇ::Matrix)::Matrix
      F, N‚ÇÅ, N‚ÇÇ = size(X‚ÇÅ, 1), size(X‚ÇÅ, 2), size(X‚ÇÇ, 2)
      K = Array{eltype(Œ∏)}(undef, N‚ÇÅ, N‚ÇÇ)
      M = ones(F, F)
      D = diagm(ones(F))
      for j in 1:N‚ÇÇ
            for i in 1:N‚ÇÅ
                  sqd = zero(eltype(Œ∏))
                  for k in 1:F
                        sqd += Œ∏[k]*(X‚ÇÅ[k,i] - X‚ÇÇ[k,j])^2
                  end
                  K[i,j] = exp(-0.5*sqd)
            end
      end
      ùêæ = kron(K, Œ∏[F+1]*M+(1-Œ∏[F+1])*D)
      return ùêæ
end
